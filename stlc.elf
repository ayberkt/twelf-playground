tp   : type.
unit : tp.
→  : tp -> tp -> tp. %infix right 10 →.

tm : type.
empty : tm.
$ : tm -> tm -> tm. %infix left 10 $.
λ : tp -> (tm -> tm) -> tm.

∷ : tm -> tp -> type. %infix none 3 ∷.
empty-ty : empty ∷ unit.
λ-ty :  ({x:tm} x ∷ T1 -> (E x) ∷ T2) -> (λ T1 E) ∷ (T1 → T2).
$-ty :  E1 ∷ T1 → T2 -> E2 ∷ T1 -> E1 $ E2 ∷ T2.

val : tm -> type. %postfix 3 val.
val-empty : empty val.
val-lam : (λ T E) val.

↦ : tm -> tm -> type. %infix none 3 ↦.
step-$-1 : E1 ↦ E1' -> E1 $ E2 ↦ E1' $ E2.
step-$-2 : E2 ↦ E2' -> E1 val -> E1 $ E2 ↦ E1 $ E2'.
step-β : E2 val -> (λ _ E1) $ E2 ↦ (E1 E2).

⇓ : tm -> tm -> type. %infix none 3 ⇓.
⇓-val    : E val -> E ⇓ E.
⇓-reduce : E ↦ E' -> E' ⇓ E'' -> E ⇓ E''.

%solve _ : (λ unit ([x] x)) $ ((λ unit ([x] x)) $ ((λ unit ([x] x)) $ empty)) ⇓ E.

%solve _ :
  (λ (unit → unit) [f] λ unit [x] f $ x) $ (λ unit [x] x) $ empty ⇓ E.

preservation : E ↦ E' -> E ∷ T -> E' ∷ T -> type.
%mode preservation +D1 +D2 -D3.


preservation-step-$-1 : preservation
                          (step-$-1 D : E1 $ E2 ↦ E1' $ E2)
                          ($-ty G G'  : E1 $ E2 ∷ T)
                          ($-ty H G'  : E1' $ E2 ∷ T)
                     <- preservation D G H.

preservation-step-$-2 : preservation
                          (step-$-2 D _  : E1 $ E2 ↦ E1 $ E2')
                          ($-ty F F'     : E1 $ E2 ∷ T)
                          ($-ty F G      : E1 $ E2' ∷ T)
                     <- preservation D F' G.
